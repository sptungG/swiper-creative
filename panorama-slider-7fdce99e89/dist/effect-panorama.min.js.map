{"version":3,"file":"effect-panorama.min.js","names":["swiper","extendParams","on","panoramaEffect","depth","rotate","params","effect","classNames","push","containerModifierClass","overwriteParams","watchSlidesProgress","Object","assign","originalParams","sizesGrid","slidesSizesGrid","halfAngleRad","Math","PI","angleModifier","i","slides","length","slideEl","slideProgress","progress","slideSize","modifiedProgress","centeredSlides","slidesPerView","angleCos","cos","translateX","rotateY","translateZ","sin","style","transform","direction","s","duration","forEach","transition"],"sources":["../src/effect-panorama.esm.js"],"sourcesContent":["export default function EffectPanorama({ swiper, extendParams, on }) {\n  extendParams({\n    panoramaEffect: {\n      depth: 200,\n      rotate: 30,\n    },\n  });\n\n  on('beforeInit', () => {\n    if (swiper.params.effect !== 'panorama') return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}panorama`);\n    swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    const overwriteParams = {\n      watchSlidesProgress: true,\n    };\n    Object.assign(swiper.params, overwriteParams);\n    Object.assign(swiper.originalParams, overwriteParams);\n  });\n\n  on('progress', () => {\n    if (swiper.params.effect !== 'panorama') return;\n    const sizesGrid = swiper.slidesSizesGrid;\n    const { depth = 200, rotate = 30 } = swiper.params.panoramaEffect;\n    const angleRad = (rotate * Math.PI) / 180;\n    const halfAngleRad = angleRad / 2;\n    const angleModifier = 1 / (180 / rotate);\n\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      const slideEl = swiper.slides[i];\n      const slideProgress = slideEl.progress;\n      const slideSize = sizesGrid[i];\n      const progressModifier = swiper.params.centeredSlides\n        ? 0\n        : (swiper.params.slidesPerView - 1) * 0.5;\n      const modifiedProgress = slideProgress + progressModifier;\n      const angleCos = 1 - Math.cos(modifiedProgress * angleModifier * Math.PI);\n      const translateX = `${modifiedProgress * (slideSize / 3) * angleCos}px`;\n      const rotateY = modifiedProgress * rotate;\n      const radius = (slideSize * 0.5) / Math.sin(halfAngleRad);\n      const translateZ = `${radius * angleCos - depth}px`;\n      slideEl.style.transform =\n        swiper.params.direction === 'horizontal'\n          ? `translateX(${translateX}) translateZ(${translateZ}) rotateY(${rotateY}deg)`\n          : `translateY(${translateX}) translateZ(${translateZ}) rotateX(${-rotateY}deg)`;\n    }\n  });\n\n  on('setTransition', (s, duration) => {\n    if (swiper.params.effect !== 'panorama') return;\n    swiper.slides.forEach((slideEl) => {\n      // eslint-disable-next-line\n      slideEl.style.transition = `${duration}ms`;\n    });\n  });\n}\n"],"mappings":";;;;;;;;;;;;;sPAAe,UAAwBA,OAAEA,EAAMC,aAAEA,EAAYC,GAAEA,IAC7DD,EAAa,CACXE,eAAgB,CACdC,MAAO,IACPC,OAAQ,MAIZH,EAAG,cAAc,KACf,GAA6B,aAAzBF,EAAOM,OAAOC,OAAuB,OACzCP,EAAOQ,WAAWC,KAAK,GAAGT,EAAOM,OAAOI,kCACxCV,EAAOQ,WAAWC,KAAK,GAAGT,EAAOM,OAAOI,4BACxC,MAAMC,EAAkB,CACtBC,qBAAqB,GAEvBC,OAAOC,OAAOd,EAAOM,OAAQK,GAC7BE,OAAOC,OAAOd,EAAOe,eAAgBJ,MAGvCT,EAAG,YAAY,KACb,GAA6B,aAAzBF,EAAOM,OAAOC,OAAuB,OACzC,MAAMS,EAAYhB,EAAOiB,iBACnBb,MAAEA,EAAQ,IAAGC,OAAEA,EAAS,IAAOL,EAAOM,OAAOH,eAE7Ce,EADYb,EAASc,KAAKC,GAAM,IACN,EAC1BC,EAAgB,GAAK,IAAMhB,GAEjC,IAAK,IAAIiB,EAAI,EAAGA,EAAItB,EAAOuB,OAAOC,OAAQF,GAAK,EAAG,CAChD,MAAMG,EAAUzB,EAAOuB,OAAOD,GACxBI,EAAgBD,EAAQE,SACxBC,EAAYZ,EAAUM,GAItBO,EAAmBH,GAHA1B,EAAOM,OAAOwB,eACnC,EACoC,IAAnC9B,EAAOM,OAAOyB,cAAgB,IAE7BC,EAAW,EAAIb,KAAKc,IAAIJ,EAAmBR,EAAgBF,KAAKC,IAChEc,EAAgBL,GAAoBD,EAAY,GAAKI,EAAxC,KACbG,EAAUN,EAAmBxB,EAE7B+B,EADsB,GAAZR,EAAmBT,KAAKkB,IAAInB,GACbc,EAAW5B,EAAvB,KACnBqB,EAAQa,MAAMC,UACgB,eAA5BvC,EAAOM,OAAOkC,UACV,cAAcN,iBAA0BE,cAAuBD,QAC/D,cAAcD,iBAA0BE,eAAwBD,YAI1EjC,EAAG,iBAAiB,CAACuC,EAAGC,KACO,aAAzB1C,EAAOM,OAAOC,QAClBP,EAAOuB,OAAOoB,SAASlB,IAErBA,EAAQa,MAAMM,WAAa,GAAGF"}